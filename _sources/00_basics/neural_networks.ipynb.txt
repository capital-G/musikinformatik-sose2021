{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to neural networks\n",
    "\n",
    "After we took a look at the different algorithms in the introduction to machine learning chapter we want to take a look at some special kind of machine learning algorithms which are called *neural networks*.\n",
    "This documents sikps the math part of neural networks in order to demonstrate those quickly.\n",
    "Those artifical neural networks were invented in the middle of the 20th century but due to the massive amount of data and computation needed for them to work they were put *on the shelf* until the beginnig of 21st century when such companies as Google collected much data and the GPU development increased rapidly thanks to the gaming industry.\n",
    "\n",
    "The *hello world* of more *advanced* machine learning problems is the [MNIST dataset](https://en.wikipedia.org/wiki/MNIST_database), where e.g. a more basic but still interesting dataset is the [Californa Housing dataset](https://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html).\n",
    "The California Housing dataset can somehow tackled with linear regression, but problems like MNIST need much more context of each variable, which we call a [dependent variable](https://en.wikipedia.org/wiki/Dependent_and_independent_variables) in statistics.\n",
    "One could say that the more dependent a variable is, the harder the problem.\n",
    "\n",
    "As neural networks tend to be complex and demanding on the computational side there emerged some libraries in Python which allow to setup and train such networks, where the 2 biggest frameworks are [TensorFlow](https://www.tensorflow.org/) by *Google* and [PyTorch](https://pytorch.org/) by *Facebook*.\n",
    "For this seminar we will focus on TensorFlow.\n",
    "These libraries are somehow quite similiar to SuperCollider as they allow to describe a graph of matehmatical operations via a high-level language (Python/sclang) which is then executed in the more performant language C++.\n",
    "Although they are somehow similar they have a different purpose: SuperCollider tries to calculate an audio stream in real time (which means we need to be fast as we do not have much time for the calculation) where TensorFlow needs to transport Gigabytes of data within secounds to multiple special devices like GPU or [TPU](https://en.wikipedia.org/wiki/Tensor_Processing_Unit).\n",
    "Also there are some algorithms implemented in TensorFlow which are missing in scsynth, such as the much important [autodiff algorithm](https://en.wikipedia.org/wiki/Automatic_differentiation) which makes neural networks feasible.\n",
    "\n",
    "Although TensorFlow is a alread a Python library for the complicated C++ library there is a libary on top of TensorFlow which is called [Keras](https://keras.io/) which became the default library to interact with TensorFlow as writing native TensorFlow code can be exhausting.\n",
    "\n",
    "Keep in mind that we are using *TensorFlow 2* which is not compatible with *TensorFlow (1)* if you look up some examples online.\n",
    "\n",
    "Like always we start with our imports, but now extended with *tensorflow* and *keras* (which comes bundled with tensorflow).\n",
    "If the import fails make sure to check the update procedure of the course material as tensorflow was originally not a dependency for this course and therefore needs to be installed manually in such a case.\n",
    "Check the docs on how to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "np.random.seed(42) # make the results reproducible"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the MNIST dataset\n",
    "\n",
    "Now its time to once again load the *MNIST* dataset which is mostly used to train a classifier to identify handwritten digits.\n",
    "We can use *keras* for this.\n",
    "Note that we already get a dataset which is split in `x` (the *input*, in our case the $28 \\times 28$ images) and `y` (the *target*, in our case the digit we want to predict) as well as *train* and *test* set (for serious working we would need a validation dataset as well).\n",
    "We must hide the test set from the neural network during its training phase so we can evaluate how well the neural networks performs on example it has not seen before.\n",
    "This is extremly important as the goal is to train a network which [generalizes](https://en.wikipedia.org/wiki/Generalization) and not just work on input it already knows (which would be useless) which may sound trivial as a human but is suprisingly difficult to achieve this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As always it is good to get familiar with the data in order to know what kind of structure the data is in and if it matches our expectations or if we made some error during loading and parsing of the data.\n",
    "On a real life example one would perform extensive statistical analysis on the dataset in order to ensure it lies within the expected order of deviations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train:\t(60000, 28, 28)\n",
      "Shape of y_train:\t(60000,)\n",
      "Shape of x_test:\t(10000, 28, 28)\n",
      "Shape of y_test:\t(10000,)\n"
     ]
    }
   ],
   "source": [
    "for name, array in zip([\"x_train\", \"y_train\", \"x_test\", \"y_test\"], [x_train, y_train, x_test, y_test]):\n",
    "\tprint(f\"Shape of {name}:\\t{array.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label of example #56422 is 4\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_index = np.random.randint(x_train.shape[0])\n",
    "\n",
    "plt.imshow(x_train[random_index], cmap='gray')\n",
    "print(f\"Label of example #{random_index} is {y_train[random_index]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x720 with 25 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows=5\n",
    "n_cols=5\n",
    "fig, axs = plt.subplots(n_rows, n_cols, figsize=(10, 10))\n",
    "for i, idx in enumerate(np.random.randint(0, x_train.shape[0], n_rows*n_cols)):\n",
    "    ax = axs[i%n_rows][i//n_rows]\n",
    "    ax.imshow(x_train[idx], cmap='gray')\n",
    "    ax.set_title(y_train[idx])\n",
    "    ax.axis('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(y_train).value_counts().plot.bar(title=\"Distribution of digits in train set\", figsize=(10, 5));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating our first neural network\n",
    "\n",
    "After we quickly analyzed the files we want to use for traning it is now time to write our first neural network.\n",
    "We will decide for a **fully connected neural network** (also called *densely connected NN*) as this is the most basic neural network.\n",
    "In a *FCNN* we create *layers* of *neurons* where each neuron of the layer is connected with each neuron of the following layer.\n",
    "\n",
    "The graphic shows for example a neural network with one (also called *hidden* layer).\n",
    "\n",
    "![Neural network with one layer](https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Colored_neural_network.svg/399px-Colored_neural_network.svg.png)\n",
    "\n",
    "Source: [https://commons.wikimedia.org/wiki/File:Colored_neural_network.svg](https://commons.wikimedia.org/wiki/File:Colored_neural_network.svg)\n",
    "\n",
    "We start on the left side with a flat input vector and where each of the vectors scalar is connected with each scalar/neuron of the next layer.\n",
    "This connection often includes an *activation function* which allows the (de-)activation of neurons.\n",
    "This hidden layer is then connected with the output layer but could also be connected with another layer which allows to represent more complicated neuronal connections.\n",
    "\n",
    "In the case of MNIST dataset our input is an image with $28 \\times 28$ pixels which each have a value between $0$ (black) and $255$ (white).\n",
    "As a vector needs to be 1-dimensional we simply *flatten* this image, so we obtain a $28*28=784$ dimensional vector.\n",
    "The output of our neural network system is not the predicted number directly but the probability for each digit according to the neural network which results in a 10 dimensional output vector as we have 10 digits (from 0 to 9).\n",
    "Wo do this because the neural network can learn much better this way as we can describe mathematically more easily what we are searching for.\n",
    "\n",
    "Our neural network is therefore much like a [probibilty density function](https://en.wikipedia.org/wiki/Probability_density_function) which shall output the proper digit according to its input.\n",
    "During training we will tell the neural network that the best solution for an handwritten 2 as input should be the vector `[0, 0, 1, 0, 0, 0, 0, 0, 0, 0]`.\n",
    "This notation is also called [*one-hot-encoding*](https://en.wikipedia.org/wiki/One-hot) which is often used for categorical problems.\n",
    "\n",
    "Engouh talk, lets use kears to write a NN with one layer with 40 neurons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Flatten(input_shape=(28, 28)), # our 28x28 image gets flattened\n",
    "    tf.keras.layers.Dense(40), # the (hidden) layer\n",
    "    tf.keras.layers.Dense(10), # the 10 dimensional output vector\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems not so hard and keras also allows us to simply inspect the model as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten (Flatten)           (None, 784)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 40)                31400     \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 10)                410       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 31,810\n",
      "Trainable params: 31,810\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just a quick remark on the number of parameters.\n",
    "Our input layer has no trainable parameters as we shall not modify the input.\n",
    "\n",
    "As every neuron of the input layer is connected with every neuron of our hidden layers the number of parameters grow rapidly:\n",
    "\n",
    "$$\n",
    "784 * 40 = 31360\n",
    "$$\n",
    "\n",
    "The missing $40$ parameters are due to the *bias* neuron which get added for each layer for mathematical reasions.\n",
    "\n",
    "The next layer has\n",
    "\n",
    "$$\n",
    "(40+1)*10 = 410\n",
    "$$\n",
    "\n",
    "parameters - in this case we already included the additional bias neuron."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training a neural network\n",
    "\n",
    "For now we only iniated some matrices and vectors and connected them in a somehow senseful manner, yet we have now discussed *how* the computer really *learns* the neural network.\n",
    "\n",
    "For this we will need to define a goal when a neural networks performs good or not via a so called [loss-function](https://en.wikipedia.org/wiki/Loss_function) (also called cost-function) which will tell us how good the neural network is performing right now.\n",
    "We can then calculate a gradient for the cost function with the parameter space of our neural networks as input which will tell us in which direction to modify the parameters of our neural network in order to get better results (this step is is actually not trivial but tensorflow helps us here).\n",
    "\n",
    "In our case we use some knowledge from information theory to construct a good loss function and use an off-the-shelve optimizer from the keras library which drives the calculation of the derivative and applies the change in the parameterspace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "    metrics='accuracy',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After all is said and done we can finally train our first neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "1875/1875 [==============================] - 2s 796us/step - loss: 10.5197 - accuracy: 0.8514\n",
      "Epoch 2/5\n",
      "1875/1875 [==============================] - 1s 796us/step - loss: 3.4047 - accuracy: 0.8784\n",
      "Epoch 3/5\n",
      "1875/1875 [==============================] - 1s 791us/step - loss: 1.0116 - accuracy: 0.8836\n",
      "Epoch 4/5\n",
      "1875/1875 [==============================] - 2s 828us/step - loss: 0.5160 - accuracy: 0.8802\n",
      "Epoch 5/5\n",
      "1875/1875 [==============================] - 1s 785us/step - loss: 0.5351 - accuracy: 0.8725\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x162eee790>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x=x_train, y=y_train, epochs=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We remember that we need to check the perfomance of our neural network on examples that it has not seen during training where the test set comes into play."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 0s 598us/step - loss: 0.6544 - accuracy: 0.8518\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.6544067859649658, 0.8518000245094299]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(x=x_test, y=y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get an accuracy of about 87% which is already quite good but we can do better by applying some data pre-processing, making it easier for the algorithm to find good parameters in our neural network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tuning the neural network\n",
    "\n",
    "Currently our input parameters (the brightness of each pixel) is between 0 and 255.\n",
    "Transforming this to be between 0 and 1 our algorithm can already learn faster as it is used to these kind of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_scaled = x_train/255.0\n",
    "x_test_scaled = x_test/255.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also add a so called [*dropout layer*](https://keras.io/api/layers/regularization_layers/dropout/) and add another hidden layer and just apply all the same steps from above on our new model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_scaled = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
    "    tf.keras.layers.Dense(48, activation='relu'),\n",
    "    tf.keras.layers.Dropout(0.3),\n",
    "    tf.keras.layers.Dense(15),\n",
    "    tf.keras.layers.Dropout(0.3),\n",
    "    tf.keras.layers.Dense(10),\n",
    "])\n",
    "\n",
    "model_scaled.compile(\n",
    "    optimizer=tf.keras.optimizers.Adam(),\n",
    "    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "    metrics='accuracy'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten_1 (Flatten)         (None, 784)               0         \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 48)                37680     \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 48)                0         \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 15)                735       \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 15)                0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 10)                160       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 38,575\n",
      "Trainable params: 38,575\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_scaled.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "1875/1875 [==============================] - 2s 899us/step - loss: 0.5824 - accuracy: 0.8214\n",
      "Epoch 2/5\n",
      "1875/1875 [==============================] - 2s 932us/step - loss: 0.3441 - accuracy: 0.9002\n",
      "Epoch 3/5\n",
      "1875/1875 [==============================] - 2s 866us/step - loss: 0.2957 - accuracy: 0.9127\n",
      "Epoch 4/5\n",
      "1875/1875 [==============================] - 2s 875us/step - loss: 0.2712 - accuracy: 0.9210\n",
      "Epoch 5/5\n",
      "1875/1875 [==============================] - 2s 874us/step - loss: 0.2526 - accuracy: 0.9272\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x163661700>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_scaled.fit(x_train_scaled, y_train, epochs=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 0s 630us/step - loss: 0.1380 - accuracy: 0.9597\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.13801522552967072, 0.9596999883651733]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_scaled.evaluate(x_test_scaled, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although we only added a few parameters and modified the training behaviour our model already performs better already.\n",
    "Now its time to take a look on the examples where our neural networks fail in order to get some new insights of the mechanics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysing the results\n",
    "\n",
    "We start by taking a look how we can ask the neural network for a prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label for image is 7\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Z1A+gAAAACXBIWXMAAAsTAAALEwEAmpwYAAAM20lEQVR4nO3dXahc9bnH8d/vpCmI6UXiS9ik0bTBC8tBEo1BSCxbQktOvIjFIM1FyYHi7kWUFkuo2It4WaQv1JvALkrTkmMJpGoQscmJxVDU4o5Es2NIjCGaxLxYIjQRJMY+vdjLso0za8ZZa2ZN8nw/sJmZ9cya9bDMz7VmvczfESEAV77/aroBAINB2IEkCDuQBGEHkiDsQBJfGeTCbHPoH+iziHCr6ZW27LZX2j5o+7Dth6t8FoD+cq/n2W3PkHRI0nckHZf0mqS1EfFWyTxs2YE+68eWfamkwxFxJCIuSPqTpNUVPg9AH1UJ+zxJx6a9Pl5M+xzbY7YnbE9UWBaAivp+gC4ixiWNS+zGA02qsmU/IWn+tNdfL6YBGEJVwv6apJtsf8P2VyV9X9L2etoCULeed+Mj4qLtByT9RdIMSU9GxP7aOgNQq55PvfW0ML6zA33Xl4tqAFw+CDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJ9Dw+uyTZPirpnKRPJV2MiCV1NAWgfpXCXrgrIv5Rw+cA6CN244EkqoY9JO2wvcf2WKs32B6zPWF7ouKyAFTgiOh9ZnteRJywfb2knZIejIjdJe/vfWEAuhIRbjW90pY9Ik4Uj2ckPS1paZXPA9A/PYfd9tW2v/bZc0nflTRZV2MA6lXlaPxcSU/b/uxz/i8iXqilKwC1q/Sd/UsvjO/sQN/15Ts7gMsHYQeSIOxAEoQdSIKwA0nUcSNMCmvWrGlbu//++0vnff/990vrH3/8cWl9y5YtpfVTp061rR0+fLh0XuTBlh1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkuCuty4dOXKkbW3BggWDa6SFc+fOta3t379/gJ0Ml+PHj7etPfbYY6XzTkxcvr+ixl1vQHKEHUiCsANJEHYgCcIOJEHYgSQIO5AE97N3qeye9VtuuaV03gMHDpTWb7755tL6rbfeWlofHR1tW7vjjjtK5z127Fhpff78+aX1Ki5evFha/+CDD0rrIyMjPS/7vffeK61fzufZ22HLDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJcD/7FWD27Nlta4sWLSqdd8+ePaX122+/vZeWutLp9/IPHTpUWu90/cKcOXPa1tavX18676ZNm0rrw6zn+9ltP2n7jO3JadPm2N5p++3isf2/NgBDoZvd+N9LWnnJtIcl7YqImyTtKl4DGGIdwx4RuyWdvWTyakmbi+ebJd1Tb1sA6tbrtfFzI+Jk8fyUpLnt3mh7TNJYj8sBUJPKN8JERJQdeIuIcUnjEgfogCb1eurttO0RSSoez9TXEoB+6DXs2yWtK56vk/RsPe0A6JeO59ltPyVpVNK1kk5L2ijpGUlbJd0g6V1J90XEpQfxWn0Wu/Ho2r333lta37p1a2l9cnKybe2uu+4qnffs2Y7/nIdWu/PsHb+zR8TaNqUVlToCMFBcLgskQdiBJAg7kARhB5Ig7EAS3OKKxlx//fWl9X379lWaf82aNW1r27ZtK533csaQzUByhB1IgrADSRB2IAnCDiRB2IEkCDuQBEM2ozGdfs75uuuuK61/+OGHpfWDBw9+6Z6uZGzZgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJ7mdHXy1btqxt7cUXXyydd+bMmaX10dHR0vru3btL61cq7mcHkiPsQBKEHUiCsANJEHYgCcIOJEHYgSS4nx19tWrVqra1TufRd+3aVVp/5ZVXeuopq45bdttP2j5je3LatEdtn7C9t/hr/18UwFDoZjf+95JWtpj+m4hYVPw9X29bAOrWMewRsVvS2QH0AqCPqhyge8D2m8Vu/ux2b7I9ZnvC9kSFZQGoqNewb5K0UNIiSScl/ardGyNiPCKWRMSSHpcFoAY9hT0iTkfEpxHxL0m/k7S03rYA1K2nsNsemfbye5Im270XwHDoeJ7d9lOSRiVda/u4pI2SRm0vkhSSjkr6Uf9axDC76qqrSusrV7Y6kTPlwoULpfNu3LixtP7JJ5+U1vF5HcMeEWtbTH6iD70A6CMulwWSIOxAEoQdSIKwA0kQdiAJbnFFJRs2bCitL168uG3thRdeKJ335Zdf7qkntMaWHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSYMhmlLr77rtL688880xp/aOPPmpbK7v9VZJeffXV0jpaY8hmIDnCDiRB2IEkCDuQBGEHkiDsQBKEHUiC+9mTu+aaa0rrjz/+eGl9xowZpfXnn28/5ifn0QeLLTuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJMH97Fe4TufBO53rvu2220rr77zzTmm97J71TvOiNz3fz257vu2/2n7L9n7bPy6mz7G90/bbxePsupsGUJ9uduMvSvppRHxL0h2S1tv+lqSHJe2KiJsk7SpeAxhSHcMeEScj4vXi+TlJByTNk7Ra0ubibZsl3dOnHgHU4EtdG297gaTFkv4uaW5EnCxKpyTNbTPPmKSxCj0CqEHXR+Ntz5K0TdJPIuKf02sxdZSv5cG3iBiPiCURsaRSpwAq6SrstmdqKuhbIuLPxeTTtkeK+oikM/1pEUAdOu7G27akJyQdiIhfTyttl7RO0i+Kx2f70iEqWbhwYWm906m1Th566KHSOqfXhkc339mXSfqBpH229xbTHtFUyLfa/qGkdyXd15cOAdSiY9gj4m+SWp6kl7Si3nYA9AuXywJJEHYgCcIOJEHYgSQIO5AEPyV9Bbjxxhvb1nbs2FHpszds2FBaf+655yp9PgaHLTuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJMF59ivA2Fj7X/264YYbKn32Sy+9VFof5E+Roxq27EAShB1IgrADSRB2IAnCDiRB2IEkCDuQBOfZLwPLly8vrT/44IMD6gSXM7bsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5BEN+Ozz5f0B0lzJYWk8Yj4re1HJd0v6YPirY9ExPP9ajSzO++8s7Q+a9asnj+70/jp58+f7/mzMVy6uajmoqSfRsTrtr8maY/tnUXtNxHxy/61B6Au3YzPflLSyeL5OdsHJM3rd2MA6vWlvrPbXiBpsaS/F5MesP2m7Sdtz24zz5jtCdsT1VoFUEXXYbc9S9I2ST+JiH9K2iRpoaRFmtry/6rVfBExHhFLImJJ9XYB9KqrsNueqamgb4mIP0tSRJyOiE8j4l+Sfidpaf/aBFBVx7DbtqQnJB2IiF9Pmz4y7W3fkzRZf3sA6tLN0fhlkn4gaZ/tvcW0RySttb1IU6fjjkr6UR/6Q0VvvPFGaX3FihWl9bNnz9bZDhrUzdH4v0lyixLn1IHLCFfQAUkQdiAJwg4kQdiBJAg7kARhB5LwIIfctc34vkCfRUSrU+Vs2YEsCDuQBGEHkiDsQBKEHUiCsANJEHYgiUEP2fwPSe9Oe31tMW0YDWtvw9qXRG+9qrO3G9sVBnpRzRcWbk8M62/TDWtvw9qXRG+9GlRv7MYDSRB2IImmwz7e8PLLDGtvw9qXRG+9GkhvjX5nBzA4TW/ZAQwIYQeSaCTstlfaPmj7sO2Hm+ihHdtHbe+zvbfp8emKMfTO2J6cNm2O7Z223y4eW46x11Bvj9o+Uay7vbZXNdTbfNt/tf2W7f22f1xMb3TdlfQ1kPU28O/stmdIOiTpO5KOS3pN0tqIeGugjbRh+6ikJRHR+AUYtr8t6bykP0TEfxfTHpN0NiJ+UfyPcnZE/GxIentU0vmmh/EuRisamT7MuKR7JP2vGlx3JX3dpwGstya27EslHY6IIxFxQdKfJK1uoI+hFxG7JV06JMtqSZuL55s19Y9l4Nr0NhQi4mREvF48Pyfps2HGG113JX0NRBNhnyfp2LTXxzVc472HpB2299gea7qZFuZGxMni+SlJc5tspoWOw3gP0iXDjA/Nuutl+POqOED3Rcsj4lZJ/yNpfbG7OpRi6jvYMJ077WoY70FpMcz4fzS57nod/ryqJsJ+QtL8aa+/XkwbChFxong8I+lpDd9Q1Kc/G0G3eDzTcD//MUzDeLcaZlxDsO6aHP68ibC/Jukm29+w/VVJ35e0vYE+vsD21cWBE9m+WtJ3NXxDUW+XtK54vk7Ssw328jnDMox3u2HG1fC6a3z484gY+J+kVZo6Iv+OpJ830UObvr4p6Y3ib3/TvUl6SlO7dZ9o6tjGDyVdI2mXpLcl/b+kOUPU2x8l7ZP0pqaCNdJQb8s1tYv+pqS9xd+qptddSV8DWW9cLgskwQE6IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUji3y9hG/l2EQpSAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_test_image_index = 0\n",
    "\n",
    "plt.imshow(x_test_scaled[random_test_image_index], cmap='gray')\n",
    "print(f\"Label for image is {y_test[random_test_image_index]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We simply give the neural network the whole list of test images we have and ask for its probability of each class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -2.8263762 ,   0.03036575,   6.4564805 ,   8.375091  ,\n",
       "        -2.5378463 ,   4.2385798 , -11.81926   ,  20.765867  ,\n",
       "        -3.2129931 ,   3.379484  ], dtype=float32)"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = model_scaled.predict(x_test_scaled)\n",
    "preds[random_test_image_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(preds[random_test_image_index]).plot.bar(\n",
    "\ttitle=\"Predicted probability for each digit class\",\n",
    "\tgrid=True,\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The neural network predicts our example correctly as a $7$.\n",
    "We can use the argmax function in numpy to get the index with the highest value in a vector.\n",
    "And as we already have all predictions available we can perform this on every prediction also easily."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "preds_one_hot = np.argmax(preds, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This allows us to filter out the examples where the prediction did not work out as hoped."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "false_indices = np.argwhere(preds_one_hot != y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(y_test[false_indices].flatten()).value_counts().plot.bar(\n",
    "\ttitle=\"Number of wrong predictions per class\",\n",
    "\tgrid=True,\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that our neural network seems to detect a $0$ quite good (although it is also easy as it just needs to check if there are any pixels in the middle of the picture) but not great on a $8$.\n",
    "But this analysis does not tell us for what the $8$ got mistakenly taken for, but a *confusion matrix* can help us out here.\n",
    "Thankfully such things are build into TensorFlow.\n",
    "\n",
    "From the [docs](https://www.tensorflow.org/api_docs/python/tf/math/confusion_matrix) we can obtain\n",
    "\n",
    "> The matrix columns represent the prediction labels and the rows represent the real labels.\n",
    "\n",
    "If our neural network would work perfect we would obtain a [diagonal matrix](https://en.wikipedia.org/wiki/Diagonal_matrix)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(10, 10), dtype=int32, numpy=\n",
       "array([[ 959,    0,    0,    1,    0,    5,    9,    3,    3,    0],\n",
       "       [   0, 1114,    2,    4,    0,    2,    3,    1,    9,    0],\n",
       "       [   5,    3,  972,   16,    6,    1,    4,    9,   16,    0],\n",
       "       [   0,    0,    1,  980,    0,   10,    0,   10,    6,    3],\n",
       "       [   1,    0,    2,    0,  929,    0,   10,    1,    3,   36],\n",
       "       [   5,    1,    0,   24,    0,  844,    5,    2,    4,    7],\n",
       "       [   7,    3,    1,    1,    3,    8,  931,    0,    4,    0],\n",
       "       [   1,    6,   17,    4,    1,    0,    0,  988,    1,   10],\n",
       "       [   4,    1,    3,    8,    6,    7,    8,    8,  924,    5],\n",
       "       [   3,    6,    0,   13,   13,    9,    1,    6,    2,  956]],\n",
       "      dtype=int32)>"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix = tf.math.confusion_matrix(y_test, preds_one_hot)\n",
    "confusion_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets take a closer look at some examples where the neural network predicted wrong."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 49 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows=7\n",
    "n_cols=7\n",
    "fig, axs = plt.subplots(n_rows, n_cols, figsize=(15, 15))\n",
    "for i, idx in enumerate(np.random.choice(false_indices.flatten(), n_rows*n_cols)):\n",
    "    ax = axs[i%n_rows][i//n_rows]\n",
    "    ax.imshow(x_test[idx], cmap='gray')\n",
    "    ax.set_title(f'{preds_one_hot[idx]} (true: {y_test[idx]})')\n",
    "    ax.axis('off')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that some digits are indeed not clearly written and may be guessed wrongly by the human as well.\n",
    "Also it turns out that those classic datasets itself contain errors in its labeling as well, see [labelerrors.com](https://labelerrors.com/) and {cite}`northcutt2021pervasive`.\n",
    "\n",
    "Therefore having a success rate of $100\\%$ on a machine learning problem is always sketchy and most likely occurs due to leakage of the y-labeled data into the input variable X."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
