{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysing drum patterns from MIDI files\n",
    "\n",
    "In our first lesson we want to get to know how to work with datasets so we can\n",
    "\n",
    "* parse a dataset\n",
    "* analyse the dataset so it matches our expectations and we did not screw up during parsing\n",
    "\n",
    "After this is done we want to take a look at how we can generate new drum patterns from the existing one.\n",
    "But in order to do this we want to take a look at the quantisation (?) of our patterns.\n",
    "\n",
    "The cleaning of the dataset and setting the data up properly takes the most time in such experiments but if one makes errors here those errors will propagate through our system - so its good to spend some time at this task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import glob\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from helpers.helpers import *\n",
    "\n",
    "np.random.seed(42)  # makes the randomness deterministic\n",
    "\n",
    "%matplotlib inline\n",
    "# todo: try %matplotlib widget\n",
    "plt.rcParams['figure.figsize'] = (15, 5)\n",
    "plt.rcParams['axes.grid'] = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting the dataset\n",
    "\n",
    "As our methods rely on data we need a way to obtain such data.\n",
    "Of course we start to get into difficult teritory here from a copyright point of view - so for now we will rely on public domain datasets?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parsing the dataset\n",
    "\n",
    "When working with large sets of files the unix utility [glob](https://en.wikipedia.org/wiki/Glob_(programming)) comes in handy as we can describe the pattern of the file paths we want to match instead of listing all files.\n",
    "\n",
    "When we take a quick look at the data set we see that there are two occurences of common file pattens:\n",
    "\n",
    "```\n",
    "midi_dataset/C/Celine Dion - (If-There-Was) Any Other Way.mid\n",
    "midi_dataset/A/A/A AH.The living daylights.mid\n",
    "```\n",
    "\n",
    "So we have either\n",
    "\n",
    "* a single character folder in which `.mid` files are\n",
    "* a single character folder with another single character folder in which `.mid` files are\n",
    "\n",
    "Some googling for *glob any depth only extension* reveals [this stack overflow answer](https://stackoverflow.com/a/14798263/3475778) from which we can now deduce our glob pattern to match the files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 39712 midi files in dataset\n"
     ]
    }
   ],
   "source": [
    "GLOB_PATTERN = '../datasets/midi_dataset/**/*.mid'\n",
    "midi_files = glob.glob(GLOB_PATTERN, recursive=True)\n",
    "print(f'Found {len(midi_files)} midi files in dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['../datasets/midi_dataset/A/A/ArminVanBuuren_-_ComingHome__karimstar95_20120526025524.mid',\n",
       "       '../datasets/midi_dataset/R/R/RevolutionsOverture.mid',\n",
       "       '../datasets/midi_dataset/P/P/pink-dont_let_me_get_me.mid',\n",
       "       '../datasets/midi_dataset/S/S/Sixpence_None_The_Richer_Kiss_Me.mid',\n",
       "       '../datasets/midi_dataset/T/T/The_Everly_Brothers_-_Bye_Bye_Love.mid'],\n",
       "      dtype='<U265')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# select 5 random files\n",
    "np.random.choice(midi_files, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But how are sure that we matched every midi file in our folder?\n",
    "We can simply match every file in our dataset directory and show us the differences by using [sets](https://realpython.com/python-sets/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Did not match 765 files\n"
     ]
    }
   ],
   "source": [
    "missed_files = set(glob.glob('../datasets/midi_dataset/**/*.*', recursive=True)) - set(midi_files)\n",
    "print(f'Did not match {len(missed_files)} files')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It turns out that we missed some files.\n",
    "Lets take a look at them using [random.choice](https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html) from the numpy library.\n",
    "But as this function does not work with sets we need to transform the set to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['../datasets/midi_dataset/H/H/HAIDUCII.Dragostea din tei K.MID',\n",
       "       '../datasets/midi_dataset/T/T/THE TROGGS.Wild thing K.MID',\n",
       "       '../datasets/midi_dataset/F/F/Fermoy_Lasses_the_Gravel_Walk.MID',\n",
       "       '../datasets/midi_dataset/C/C/CREEDENCE C.R.Tombstone shadow K.MID',\n",
       "       '../datasets/midi_dataset/U/U/Unbreak-tonibraxton.MID'],\n",
       "      dtype='<U114')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.choice(list(missed_files), 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems there are files missing that have a capitalized file extension `.MID`.\n",
    "\n",
    "But lets not rely on the few examples, lets use a [list comprehension](https://realpython.com/list-comprehension-python/) to filter out all examples that are not ending in a capitalized manner."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['../datasets/midi_dataset/R/R/rhapsodyinblue.midi',\n",
       " '../datasets/midi_dataset/S/S/standbyyourman.midi',\n",
       " '../datasets/midi_dataset/M/M/MM-personal jesus.midi',\n",
       " '../datasets/midi_dataset/S/S/Stripped [Rammstein].MIDi',\n",
       " '../datasets/midi_dataset/L/L/littlebrownjug.midi',\n",
       " '../datasets/midi_dataset/S/S/S.ROGERS BAND.Alzati la gonna K.Mid',\n",
       " '../datasets/midi_dataset/M/M/mike_koglin_&_dj_uto__time__zoik.midi',\n",
       " '../datasets/midi_dataset/W/W/Wollt ihr das bett in flammen sehen.Mid']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[f for f in list(missed_files) if not f.endswith('.MID')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that we are still missing the files that have `.Mid`, `.midi` and `.MIDi` as extension.\n",
    "If we include these we will now have matched all files of our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 40477 midi files in dataset\n"
     ]
    }
   ],
   "source": [
    "for ext in ['MID', 'Mid', 'midi', 'MIDi']:\n",
    "    MID_GLOB_PATTERN = f'../datasets/midi_dataset/**/*.{ext}'\n",
    "    midi_files += glob.glob(MID_GLOB_PATTERN, recursive=True)\n",
    "print(f'Found {len(midi_files)} midi files in dataset')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Did not match 0 files\n"
     ]
    }
   ],
   "source": [
    "missed_files = set(glob.glob('../datasets/midi_dataset/**/*.*', recursive=True)) - set(midi_files)\n",
    "print(f'Did not match {len(missed_files)} files')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course we could have just matched every file in the directory but then we would not have those exercises and one will at one point work with *dirty* datasets so its good to have at least some experience on how to inspect just the files of our dataset.\n",
    "\n",
    "Also it is always a good idea to only include such files into the dataset that we expect because having an unexpected file in the dataset needs to be avoided because this can mess up our results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inspecting the data\n",
    "\n",
    "Now as we have all file paths available it is a good practice to take a first look at the data.\n",
    "We need to understand how the information we are interested in is accessible and also that it is probably not standardized - as we have seen above with the filenames already. \n",
    "\n",
    "To work with music notation we will use the python library [music21](https://web.mit.edu/music21/) from the MIT and [pretty_midi](https://github.com/craffel/pretty-midi) to inspect the MIDI files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from music21 import converter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected ../datasets/midi_dataset/A/A/AreYouAfraidOfTheDark.mid as example MIDI file\n"
     ]
    }
   ],
   "source": [
    "example_midi_file = np.random.choice(midi_files)\n",
    "print(f'Selected {example_midi_file} as example MIDI file')\n",
    "example_stream = converter.parse(example_midi_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0.0} <music21.stream.Part 0x102e6c730>\n",
      "    {0.0} <music21.instrument.Piano 'Theme from Love Story: piano'>\n",
      "    {0.0} <music21.key.Key of C major>\n",
      "    {0.0} <music21.stream.Voice 0x14d8e4190>\n",
      "        {0.0} <music21.note.Rest rest>\n",
      "        {8.0} <music21.note.Note A>\n",
      "        {8.75} <music21.note.Note C>\n",
      "        {9.0} <music21.note.Note E>\n",
      "        {9.25} <music21.note.Rest rest>\n",
      "        {9.3333} <music21.note.Note A>\n"
     ]
    }
   ],
   "source": [
    "print(stream_string(example_stream))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see a single score can take some time to process and analyse.\n",
    "So before we process every file from our dataset we should take a look at a subset to watch out for any patterns.\n",
    "\n",
    "Also it is worth making some research so we can reduce the amount of data we need to process.\n",
    "From the [wikipedia article on General MIDI (GM)](https://en.wikipedia.org/wiki/General_MIDI#Percussive) we can see that percussive tracks should be on channel 10.\n",
    "\n",
    "music21 has [a build in MIDI library](https://web.mit.edu/music21/doc/moduleReference/moduleMidi.html) but it is rather difficult and slow to extract the drums using music21 which is why we use *pretty_midi* for this task.\n",
    "\n",
    "The [docs](https://web.mit.edu/music21/doc/moduleReference/moduleConverter.html) reveal that `music21.converter` seems to be the proper package.\n",
    "\n",
    "We also start annotating our dataset using [pandas](https://pandas.pydata.org/) which is a library for data analysis and manipulation to keep track of any metadata the files have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16262</th>\n",
       "      <td>../datasets/midi_dataset/A/A/another_30624700.mid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36924</th>\n",
       "      <td>../datasets/midi_dataset/P/P/Pokemon RedBlueYe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36978</th>\n",
       "      <td>../datasets/midi_dataset/P/P/puff_daddy-come_w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32078</th>\n",
       "      <td>../datasets/midi_dataset/B/B/BB_King_-_Sweet_S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15292</th>\n",
       "      <td>../datasets/midi_dataset/A/A/Aqua - Lollipop C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22177</th>\n",
       "      <td>../datasets/midi_dataset/M/M/Madonna_-_Express...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8920</th>\n",
       "      <td>../datasets/midi_dataset/T/T/The Legend of Zel...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17983</th>\n",
       "      <td>../datasets/midi_dataset/F/F/FITZGERALD.Over t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29692</th>\n",
       "      <td>../datasets/midi_dataset/4/4_11_If_You_Open_Yo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23153</th>\n",
       "      <td>../datasets/midi_dataset/J/J/John-Brown's-Body...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               file_path\n",
       "16262  ../datasets/midi_dataset/A/A/another_30624700.mid\n",
       "36924  ../datasets/midi_dataset/P/P/Pokemon RedBlueYe...\n",
       "36978  ../datasets/midi_dataset/P/P/puff_daddy-come_w...\n",
       "32078  ../datasets/midi_dataset/B/B/BB_King_-_Sweet_S...\n",
       "15292  ../datasets/midi_dataset/A/A/Aqua - Lollipop C...\n",
       "22177  ../datasets/midi_dataset/M/M/Madonna_-_Express...\n",
       "8920   ../datasets/midi_dataset/T/T/The Legend of Zel...\n",
       "17983  ../datasets/midi_dataset/F/F/FITZGERALD.Over t...\n",
       "29692  ../datasets/midi_dataset/4/4_11_If_You_Open_Yo...\n",
       "23153  ../datasets/midi_dataset/J/J/John-Brown's-Body..."
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "midi_df = pd.DataFrame({'file_path': midi_files})\n",
    "midi_df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pretty_midi as pm\n",
    "from mido import KeySignatureError\n",
    "\n",
    "def parse_midi(row) -> bool:\n",
    "    try:\n",
    "        sound = pm.PrettyMIDI(row['file_path'])\n",
    "        row['midi_error'] = False\n",
    "    # those are errors that were popping up when the whole dataset was parsed\n",
    "    except (OSError, ValueError, IndexError, KeySignatureError, EOFError, ZeroDivisionError):\n",
    "        row['midi_error'] = True\n",
    "        return row\n",
    "    \n",
    "    try:\n",
    "        row['beat_start'] = sound.estimate_beat_start()\n",
    "        row['tempo'] = sound.estimate_tempo()\n",
    "        row['end_time'] = sound.get_end_time()\n",
    "        row['drums'] = any([i.is_drum for i in sound.instruments])\n",
    "        row['resolution'] = sound.resolution\n",
    "        # row['pitch_class_hist'] = sound.get_pitch_class_histogram()\n",
    "        row['instrument_names'] = [i.name.strip() for i in sound.instruments]\n",
    "        row['num_time_signature_changes'] = len(sound.time_signature_changes)\n",
    "    except ValueError as e:\n",
    "        # ValueError: Can't estimate beat start when there are no notes.\n",
    "        # ValueError: Can't provide a global tempo estimate when there are fewer than two notes.\n",
    "        print(f\"Could not parse MIDI file {row['file_path']}: {e}\")\n",
    "    \n",
    "    return row"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use [swifter](https://github.com/jmcarpenter2/swifter) to paralellize the analysis of our MIDI files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/swifter/swifter.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[1;32m    339\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0msuppress_stdout_stderr_logging\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 340\u001b[0;31m                 \u001b[0mtmp_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    341\u001b[0m                 \u001b[0msample_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresult_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-13-62844c87b183>\u001b[0m in \u001b[0;36mparse_midi\u001b[0;34m(row)\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0msound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPrettyMIDI\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'file_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m         \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'midi_error'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pretty_midi/pretty_midi.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, midi_file, resolution, initial_tempo)\u001b[0m\n\u001b[1;32m     62\u001b[0m                 \u001b[0;31m# Otherwise, try passing it in as a file pointer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0mmidi_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmido\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMidiFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmidi_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filename, file, type, ticks_per_beat, charset, debug, clip)\u001b[0m\n\u001b[1;32m    312\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36m_load\u001b[0;34m(self, infile)\u001b[0m\n\u001b[1;32m    339\u001b[0m              \u001b[0mnum_tracks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 340\u001b[0;31m              self.ticks_per_beat) = read_file_header(infile)\n\u001b[0m\u001b[1;32m    341\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36mread_file_header\u001b[0;34m(infile)\u001b[0m\n\u001b[1;32m    107\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mread_file_header\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 108\u001b[0;31m     \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_chunk_header\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36mread_chunk_header\u001b[0;34m(infile)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mread_chunk_header\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m     \u001b[0mheader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mheader\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5464\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5465\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5466\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'read'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-04dbcc88d598>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmidi_df_sub\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmidi_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmidi_df_sub\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmidi_df_sub\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mswifter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparse_midi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mmidi_df_sub\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/swifter/swifter.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[1;32m    347\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mERRORS_TO_HANDLE\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# if can't vectorize, estimate time to pandas apply\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    348\u001b[0m             \u001b[0mwrapped\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wrapped_apply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresult_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 349\u001b[0;31m             \u001b[0mtimed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtimeit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwrapped\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumber\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mN_REPEATS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    350\u001b[0m             \u001b[0msample_proc_est\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtimed\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mN_REPEATS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mest_apply_duration\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample_proc_est\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_SAMPLE_SIZE\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/timeit.py\u001b[0m in \u001b[0;36mtimeit\u001b[0;34m(stmt, setup, timer, number, globals)\u001b[0m\n\u001b[1;32m    230\u001b[0m            number=default_number, globals=None):\n\u001b[1;32m    231\u001b[0m     \u001b[0;34m\"\"\"Convenience function to create Timer object and call timeit method.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mTimer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msetup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumber\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m def repeat(stmt=\"pass\", setup=\"pass\", timer=default_timer,\n",
      "\u001b[0;32m/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/timeit.py\u001b[0m in \u001b[0;36mtimeit\u001b[0;34m(self, number)\u001b[0m\n\u001b[1;32m    174\u001b[0m         \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 176\u001b[0;31m             \u001b[0mtiming\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mgcold\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/timeit.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(_it, _timer, _stmt)\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/swifter/swifter.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m()\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0msuppress_stdout_stderr_logging\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m                 self._obj.iloc[: self._SAMPLE_SIZE, :].apply(\n\u001b[0m\u001b[1;32m    249\u001b[0m                     \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresult_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m                 )\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[1;32m   7766\u001b[0m             \u001b[0mkwds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7767\u001b[0m         )\n\u001b[0;32m-> 7768\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7769\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7770\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapplymap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mna_action\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mget_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    183\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_raw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 185\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_empty_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    275\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 276\u001b[0;31m         \u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_series_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m         \u001b[0;31m# wrap results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_series_generator\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    288\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries_gen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m                 \u001b[0;31m# ignore SettingWithCopy here in case the user mutates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m                 \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCSeries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m                     \u001b[0;31m# If we have a view on v, we need to make a copy because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-13-62844c87b183>\u001b[0m in \u001b[0;36mparse_midi\u001b[0;34m(row)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mparse_midi\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0msound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPrettyMIDI\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'file_path'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m         \u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'midi_error'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;31m# those are errors that were popping up when the whole dataset was parsed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/pretty_midi/pretty_midi.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, midi_file, resolution, initial_tempo)\u001b[0m\n\u001b[1;32m     58\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmidi_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m                 \u001b[0;31m# If a string was given, pass it as the string filename\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m                 \u001b[0mmidi_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmido\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMidiFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmidi_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m                 \u001b[0;31m# Otherwise, try passing it in as a file pointer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, filename, file, type, ticks_per_beat, charset, debug, clip)\u001b[0m\n\u001b[1;32m    314\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 316\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_load\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0madd_track\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36m_load\u001b[0;34m(self, infile)\u001b[0m\n\u001b[1;32m    349\u001b[0m                     \u001b[0m_dbg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Track {}:'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 351\u001b[0;31m                 self.tracks.append(read_track(infile,\n\u001b[0m\u001b[1;32m    352\u001b[0m                                               \u001b[0mdebug\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m                                               clip=self.clip))\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36mread_track\u001b[0;34m(infile, debug, clip)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_sysex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m             \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus_byte\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpeek_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclip\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0mtrack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/midifiles/midifiles.py\u001b[0m in \u001b[0;36mread_message\u001b[0;34m(infile, status_byte, peek_data, delta, clip)\u001b[0m\n\u001b[1;32m    136\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mIOError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data byte must be in range 0..127'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mMessage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_bytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstatus_byte\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdata_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdelta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/messages/messages.py\u001b[0m in \u001b[0;36mfrom_bytes\u001b[0;34m(cl, data, time)\u001b[0m\n\u001b[1;32m    122\u001b[0m         \"\"\"\n\u001b[1;32m    123\u001b[0m         \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__new__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0mmsgdict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecode_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m'data'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmsgdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mmsgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSysexData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsgdict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/messages/decode.py\u001b[0m in \u001b[0;36mdecode_message\u001b[0;34m(msg_bytes, time, check)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m         \u001b[0mcheck_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstatus_byte\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_SPECIAL_CASES\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/github/musikinformatik_sose2021/venv/lib/python3.8/site-packages/mido/messages/checks.py\u001b[0m in \u001b[0;36mcheck_data\u001b[0;34m(data_bytes)\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mcheck_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mbyte\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mconvert_py2_bytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mcheck_data_byte\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbyte\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import swifter\n",
    "\n",
    "midi_df_sub = midi_df.sample(10000)\n",
    "midi_df_sub = midi_df_sub.swifter.apply(parse_midi, axis=1)\n",
    "midi_df_sub.sample(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets examine the extracted metadata of those files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_26_0.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.midi_error.value_counts().plot.bar(logy=True)\n",
    "plt.title(\"Number of faulty MIDI files\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_27_0.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.drums.value_counts().plot.bar()\n",
    "plt.title(\"Number of MIDI files that contain drums\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4gAAAEvCAYAAAAHNu+xAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAVq0lEQVR4nO3df4xd510n4M87nvE4OCWNE+OYeurrUtq1x4GksZZWQZXbLIUmFV0tlehu0Jayu5VCbW1ZVawrr9hUAtFWGJUitrT8aoIYU8jCUiWlpOzY7P5BW2yakBBTmtIYitK4JEvAEUqM8+4f953JzHjG43jmzvF4nkc6mnPec+657/nOmff6c+8516XWGgAAABjqugMAAABcGgREAAAAkgiIAAAANAIiAAAASQREAAAAGgERAACAJMlw1x3owrXXXlt7vV7X3TjHM888k40bN3bdjTVH3buh7t1Q926oe3fUvhvq3g1178Zqrfvx48f/rta6eW77mgyIvV4vx44d67ob5zh69Gj27t3bdTfWHHXvhrp3Q927oe7dUftuqHs31L0bq7XupZST87W7xBQAAIAkAiIAAACNgAgAAEASAREAAIBGQAQAACCJgAgAAEAjIAIAAJBEQAQAAKAREAEAAEgiIAIAANAIiAAAACQREAEAAGgERAAAAJIIiAAAADQCIgAAAEkERAAAABoBEQAAgCQCIgAAAI2ACAAAQBIBEQAAgEZABAAAIImACAAAQCMgAgAAkERABAAAoBEQAQAASCIgAgAA0AiIAAAAJBEQAQAAaAREAAAAkgiIAAAANAIiAAAASQREAAAAGgERAACAJAIiAAAAjYAIAABAEgERAACARkAEAAAgiYAIAABAIyACAACQREAEAACgERABAABIIiACAADQCIgAAAAkERABAABoBEQAAACSCIgAAAA0AiIAAABJBEQAAAAaAREAAIAkAiIAAACNgAgAAEASAREAAIBGQAQAACCJgAgAAEAjIAIAAJBEQAQAAKAREAEAAEgiIAIAANAIiAAAACQREAEAAGgERAAAAJIIiAAAADQCIgAAAEkERAAAABoBEQAAgCQCIgAAAI2ACAAAQBIBEQAAgEZABAAAIImACAAAQCMgAgAAkERABAAAoBEQAQAASCIgAgAA0AiIAAAAJBEQAQAAaAREAAAAkgiIAAAANAIiAAAASQREAAAAGgERAACAJAIiAAAAjYAIAABAEgERAACARkAEAAAgiYAIAABAIyACAACQREAEAACgERABAABIIiACAADQCIgAAAAkERABAABoBEQAAACSCIgAAAA0AiIAAABJBEQAAAAaAREAAIAkAiIAAACNgAgAAEASAREAAIBGQAQAACCJgAgAAEAjIAIAAJBEQAQAAKAREAEAAEgiIAIAANAIiAAAACQREAEAAGgERAAAAJIIiAAAADQCIgAAAEkERAAAABoBEQAAgCQCIgAAAM1w1x3gwn3n++/P0/90ZtHtXrLzQP7xxAdmtV11xUge/O9vGlTXAACAy4CAuIo8/U9n8tgHblt0u+vvOnDOdr0D9w2qWwAAwGXCJaYAAAAkERABAABoBEQAAACSCIgAAAA0AiIAAABJBEQAAAAaAREAAIAkAiIAAACNgHgJecMb3tB1F160UkrXXQAAAJaJgAgAAEASAREAAIBGQAQAACCJgAgAAEAjIAIAAJBEQAQAAKAZeEAspZw+z7peKeXfzVjeU0r5yKD7xNLt379/+r+4KKUs2zQyMpKXv/zl57QPDQ0t+rhSSjZs2DBr+w0bNmT//v3T/T58+HB2796ddevWZffu3dm/f3/e+c53ZmhoKBs2bMjQ0FB2796dw4cPL1qDufs6fPjwrLaxsbGMjY3NWr8Uhw8fztjY2PQxj42NXfA+5+vrcllKv5bTII+Ry4/zBbrj74+1YtWe67XWgU5JTp9n3d4k9w66D3Onm266qV6K+r+OhW3/r/de0H52f2L3RT/2Quzbt68mWdbpxhtvrENDQ7Parr766nrDDTfMalu/fv30fCllenn9+vV1aGiovupVr6pJ6i233FJ7vV69/fbb6/DwcN23b1+dmJioO3bsqJOTk/W5556rBw8erMPDw/Xmm2+uO3bsqIcOHaq9Xq8ePHiw7tixo05MTCxYg7n7mpycrJs3b66bN2+uk5OT9e67767XXXdd3bp1a7377rvr5OTkovs8n4mJibp58+a6devWev/999f777+/XnfddXXz5s2L7nO+vi6lL8vVryNHjiz5+Wf2Y1DHeLlZzrqvVl2cL+reHbXvxkJ1N14PlvO9G/PVfTWc60mO1fky2nyN52yU/FCSLyR5IMnHkqxLcjrJTyV5MMnnkmxp2+5I8sdJHkryk4sExM8lebrt98dmBsYk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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_28_1.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.end_time.plot.box(vert=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the `end_time` has some extreme values that are probably wrong - lets inspect those examples closer to see if we can see a pattern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beat_start</th>\n",
       "      <th>drums</th>\n",
       "      <th>end_time</th>\n",
       "      <th>file_path</th>\n",
       "      <th>instrument_names</th>\n",
       "      <th>midi_error</th>\n",
       "      <th>num_time_signature_changes</th>\n",
       "      <th>resolution</th>\n",
       "      <th>tempo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28128</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>True</td>\n",
       "      <td>8076.648605</td>\n",
       "      <td>../datasets/midi_dataset/D/D/DION.Move any mou...</td>\n",
       "      <td>[Room2/Chorus3, Room2/Chorus3, Room2/Chorus3, ...</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>231.740783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4909</th>\n",
       "      <td>1.999998</td>\n",
       "      <td>True</td>\n",
       "      <td>6100.739733</td>\n",
       "      <td>../datasets/midi_dataset/G/G/Give a Little Bea...</td>\n",
       "      <td>[temp piano, new piano, , sax solo part 1, sax...</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>174.986064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22934</th>\n",
       "      <td>5.641020</td>\n",
       "      <td>True</td>\n",
       "      <td>3721.089187</td>\n",
       "      <td>../datasets/midi_dataset/J/J/Jean-Michel-Jarre...</td>\n",
       "      <td>[SYNTH 1, SYNTH 1, SYNTH 1, SYNTH 2, SYNTH 2, ...</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>384.0</td>\n",
       "      <td>195.528695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32700</th>\n",
       "      <td>3.692304</td>\n",
       "      <td>True</td>\n",
       "      <td>2230.586534</td>\n",
       "      <td>../datasets/midi_dataset/B/B/BeatlesForSAleALB...</td>\n",
       "      <td>[No Reply, No Reply, No Reply, No Reply, No Re...</td>\n",
       "      <td>False</td>\n",
       "      <td>14.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>215.963289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7214</th>\n",
       "      <td>3.010272</td>\n",
       "      <td>False</td>\n",
       "      <td>1887.996191</td>\n",
       "      <td>../datasets/midi_dataset/T/T/Terranigma - Over...</td>\n",
       "      <td>[Acoustic Bass, String Ensemble 1, Trombone, T...</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>204.211097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39234</th>\n",
       "      <td>4.288861</td>\n",
       "      <td>False</td>\n",
       "      <td>1869.334012</td>\n",
       "      <td>../datasets/midi_dataset/W/W/WarioWare Smooth ...</td>\n",
       "      <td>[SmartMusic SoftSynth]</td>\n",
       "      <td>False</td>\n",
       "      <td>121.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>212.127846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12698</th>\n",
       "      <td>2.068964</td>\n",
       "      <td>True</td>\n",
       "      <td>1629.273648</td>\n",
       "      <td>../datasets/midi_dataset/S/S/SPREENGSTEEN.Tent...</td>\n",
       "      <td>[, , , , , , ]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>232.675124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29729</th>\n",
       "      <td>4.800000</td>\n",
       "      <td>True</td>\n",
       "      <td>1476.141632</td>\n",
       "      <td>../datasets/midi_dataset/X/X/x_japan-art_of_li...</td>\n",
       "      <td>[Gtr1, Gtr2, Gtr3, Bass, Keyboard&lt;R&gt;, Keyboard...</td>\n",
       "      <td>False</td>\n",
       "      <td>41.0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>177.355756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7750</th>\n",
       "      <td>0.416666</td>\n",
       "      <td>False</td>\n",
       "      <td>1472.191436</td>\n",
       "      <td>../datasets/midi_dataset/T/T/The-9th-Symphony.mid</td>\n",
       "      <td>[]</td>\n",
       "      <td>False</td>\n",
       "      <td>197.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>228.889697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32208</th>\n",
       "      <td>10.300991</td>\n",
       "      <td>False</td>\n",
       "      <td>1260.871022</td>\n",
       "      <td>../datasets/midi_dataset/B/B/beethoven-sonata1...</td>\n",
       "      <td>[No Name, No Name, No Name, No Name, No Name]</td>\n",
       "      <td>False</td>\n",
       "      <td>3.0</td>\n",
       "      <td>480.0</td>\n",
       "      <td>220.802042</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       beat_start  drums     end_time  \\\n",
       "28128    1.200000   True  8076.648605   \n",
       "4909     1.999998   True  6100.739733   \n",
       "22934    5.641020   True  3721.089187   \n",
       "32700    3.692304   True  2230.586534   \n",
       "7214     3.010272  False  1887.996191   \n",
       "39234    4.288861  False  1869.334012   \n",
       "12698    2.068964   True  1629.273648   \n",
       "29729    4.800000   True  1476.141632   \n",
       "7750     0.416666  False  1472.191436   \n",
       "32208   10.300991  False  1260.871022   \n",
       "\n",
       "                                               file_path  \\\n",
       "28128  ../datasets/midi_dataset/D/D/DION.Move any mou...   \n",
       "4909   ../datasets/midi_dataset/G/G/Give a Little Bea...   \n",
       "22934  ../datasets/midi_dataset/J/J/Jean-Michel-Jarre...   \n",
       "32700  ../datasets/midi_dataset/B/B/BeatlesForSAleALB...   \n",
       "7214   ../datasets/midi_dataset/T/T/Terranigma - Over...   \n",
       "39234  ../datasets/midi_dataset/W/W/WarioWare Smooth ...   \n",
       "12698  ../datasets/midi_dataset/S/S/SPREENGSTEEN.Tent...   \n",
       "29729  ../datasets/midi_dataset/X/X/x_japan-art_of_li...   \n",
       "7750   ../datasets/midi_dataset/T/T/The-9th-Symphony.mid   \n",
       "32208  ../datasets/midi_dataset/B/B/beethoven-sonata1...   \n",
       "\n",
       "                                        instrument_names  midi_error  \\\n",
       "28128  [Room2/Chorus3, Room2/Chorus3, Room2/Chorus3, ...       False   \n",
       "4909   [temp piano, new piano, , sax solo part 1, sax...       False   \n",
       "22934  [SYNTH 1, SYNTH 1, SYNTH 1, SYNTH 2, SYNTH 2, ...       False   \n",
       "32700  [No Reply, No Reply, No Reply, No Reply, No Re...       False   \n",
       "7214   [Acoustic Bass, String Ensemble 1, Trombone, T...       False   \n",
       "39234                             [SmartMusic SoftSynth]       False   \n",
       "12698                                     [, , , , , , ]       False   \n",
       "29729  [Gtr1, Gtr2, Gtr3, Bass, Keyboard<R>, Keyboard...       False   \n",
       "7750                                                  []       False   \n",
       "32208      [No Name, No Name, No Name, No Name, No Name]       False   \n",
       "\n",
       "       num_time_signature_changes  resolution       tempo  \n",
       "28128                         1.0       120.0  231.740783  \n",
       "4909                          1.0       480.0  174.986064  \n",
       "22934                         1.0       384.0  195.528695  \n",
       "32700                        14.0        96.0  215.963289  \n",
       "7214                          1.0      1024.0  204.211097  \n",
       "39234                       121.0      1024.0  212.127846  \n",
       "12698                         1.0       240.0  232.675124  \n",
       "29729                        41.0       480.0  177.355756  \n",
       "7750                        197.0       240.0  228.889697  \n",
       "32208                         3.0       480.0  220.802042  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "midi_df_sub.sort_values('end_time', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Regarding this it seems we should filter out those really long pieces as those are most probably wrong files.\n",
    "\n",
    "Those errors could be caused by our parsing or by the MIDI files itself - but as we have a big enough corpora it is justifiable by not including those outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA40AAAEvCAYAAADhHyT1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAVn0lEQVR4nO3df5Dcd33f8df7zvIpRY6xDRgasA88cSpZtA64SUoMI6YNTUwbk1LXqJmWYFXEHqM0A0PkWNMJyZSpnUaeGpOxgYGGNkQ4ISFxbRogo1MYoKS2iUOwBMQktoPxD7BdBxkj5NOnf9zeoZP2cz4JrL21H48ZjW4/++P72fvcd1fP2++uqrUWAAAAGGZi1BMAAABg5RKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABA13GjnsBK8KxnPatNT0+PehqHefTRR/OMZzxj1NNgmazXeLFe48V6jRfrNV6s13ixXuNlnNbr1ltv/Xpr7dnDzhONSaanp3PLLbeMehqH2bVrVzZs2DDqabBM1mu8WK/xYr3Gi/UaL9ZrvFiv8TJO61VVd/XOc3gqAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgK7jRj0Bjt4/+tWP5ZHH9h82fsLay/KNPVd0r3fi963KX/zKq57MqQEAAE8RonGMPfLY/tx5xasPG3/x+y8bOj5v+rKbnsxpAQAATyEOTwUAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoXMFe+cpXjnoKy1ZVo54CAADwJBCNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACg6wmjsaqmq+rz3+2Gquo1VbXuKK63oapedhTXO7uqzjvS63FkJicnF/67jap6Sv6ZmJjIKaeckomJiaxevXro+Vu2bMkb3vCGTExMPOHtnXLKKZmcnMz69euzY8eOJMmOHTuyfv36RePDxpayZcuWhfmtXr06W7ZsedLXf7mO9L7AUvw8ATCOxvn567hjuK3XJLkxye4jvN6GJHuTfHq5V6iq45KcneScJB85wu2xTJOTkzlw4MCop3FUqiqttYXTk5OTmZ2dzcTExMJ9mpiYyIte9KLccccdeeihh7JmzZrs27dv4fonn3xykuTBBx/MO9/5zpx55plJktWrVy9cbn4bxx9/fA4cOJDHH388Dz30UC655JJccMEF2bRpUz796U/npptuynvf+96ce+65+eQnP5kLL7wwSXL99dcvjG3atClJsnHjxsPuz5YtW3LdddflyiuvzMUXX5zrrrsuW7duTZJcc8013/Pv35HYsWNHtm3btuj+LXVfYCl+ngAYR2P//NVaW/JPkukkX0jygSR7knwoyd9L8tIkf5rk1iQfTfK8weU3J7k5yV8k+f3BZV+W5KEkf5PktiRndLb1C5mLys8l+eBg2/cluWdwvZcn+ZdJ/izJnyf5kySnDq77tiT/M8mnkuxIcneSrw2ud+FS9/GlL31pW4nmlqfv9K03Dh1f/1vrj+p6RyrJiv5TVUPHJyYmWpK2Zs2aRadPOumkhctMTk627du3t6pql1xySUvSVq1atXD56enptnPnznbWWWctjCdpz33uc9v09HQ79dRTF+Ywf/lVq1YtbHNqaqq11trOnTvb1NRU27lz56Lv7fT0dJuenl40Nr+9Yaamptr27dsXjW3fvn1hO6N01llnHXb/lrovx8rMzMxIt8+RmV+vlfrzxGL2r/FivcaL9Rov4/T8leSW1uml5b7S+ENJNrXWPlVV70tyaZKfSXJ+a+1rVXVhkrcnuSjJH7TW3pMkVfWfB9e7pqpuSHJja+1DS2znsiQvbK3tq6pnttb+X1Vdl2Rva+03Brd5UpIfa621qvoPSX4pyVsG11+X5NzW2mNV9XNJzmmtvWnYhqrqjUnemCSnnnpqdu3atcxvxbE1fdlNS57fm/cT3Z8nut2ngnbQK4kHm38lce/evYtOP/LIIwuXmZ2dzbp169Jay3nnnZdrr702+/fvX7j83XffndnZ2ezZs2fRdh544IFFp+d3tLvvvjsHDhxYuI19+/Zl165dmZ2dzb59+zI7O7toze66665U1aKx+e0NW9t9+/Zl3bp1i85bt27dwnZGac+ePYfdv6Xuy7Gyd+/ekX9vWL759VqpP08sZv8aL9ZrvFiv8fJUef5abjT+bWvtU4OvfzvJ5UnWJ/n44P1sk0nuHZy/fhCLz0yyJnOvQi7X55J8oKr+MMkfdi7z/CTXV9XzkhyfuVcv593QWntsORtqrb07ybuT5JxzzmkbNmw4gmkeO3de8eruedOX3ZSh835/ho/P++Oblrzd5aorv+ubeFIdegjqvPlDUNesWZO9e/cunD7xxBPz8MMPJ5k7XHX37t2pqnzkI3NHOK9atSr79+/PxMRETjvttExOTmbt2rX50pe+tBCDz3nOc7J69eo89thjuf/++xfex3jaaaflnnvuydTUVPbu3Zupqals2LAhMzMzmZqayuTk5KI1O/3005MsXseZmZmsXbt26NpOTU1l9+7defOb37wwdtVVVy1sZ5TWrl172P1b6r4cK7t27Rr594blm1+vlfrzxGL2r/FivcaL9RovT5Xnr+V+euqh//L+RpLbW2tnD/68uLX2qsF5v5XkTa21Fyf51SSrj2A+r07ym0lekuTmwXsTD3VNkncObv/nD7n9R49gW3yXJiZW9ofvLvVKY1UteqVxcnIyDz/88MJ9mp2dzVvf+tacccYZufbaa5PMhdmqVaty4MCB3HXXXbngggty3333LQTjmWeemfvvvz/33XdfHnjggYVoPXDgQL761a+mtbawzYsuuigzMzPZtGlTNm/enE2bNmVmZib79+/PzMxMHn300Tz66KOLxjZt2pRt27YNvU+bN2/O1q1bc9VVV+Wb3/xmrrrqqmzdujWbN2/+nn5Pj8a2bdsOu39L3RdYip8nAMbRuD9/LfeVxtOq6p+01v5Pkn+b5DNJNs+PVdWqJGe21m5PckKSewdjP5u59yMmc6F5Qm8DVTWR5AWttZmq+mSS12XulcpvJPn+gy564kG3+fol5rzk9vjuzc7Oju2H4RwalLOzs0my6L4cOHAgd9xxR6oqJ510Uh5++OEcf/zxC9d/8MEHk8y9onnppZfmxhtvTJJ861vfOmx73/72txe+Pvnkk/Oud70rn/jEJ/L2t789GzduzMte9rJs2bIle/bsydq1a3P11VcnyaKx+csOM/9hN5dffnne8pa3ZGpqKhdffPHIPwQn+c6bu5d7X2Apfp4AGEfj/vy13Gj8YpJLB+9n3J25V/s+muQdVXXi4Hb+W5Lbk/ynzH1QzdcGf8+H2weTvKeqfiHJv26tffmQbUwm+e3B7VWSdwze0/i/knyoqs5PsiVzH3jze1X1cJKdSV7YmfNMksuq6rYk/6W1dv0y7ytHYD62eoeCPp289rWvPerDCzZu3Dj0QeNIHkiuueaaFRGJw/TuHxwNP08AjKNxfv56wmhsrd2Z5B8MOeu2JK8Ycvlrk1w7ZPxTmfugmt529ic5d8j4l5L8w0OG/2jI5d52yOmHkvzj3vYAAAB4Yiv7TWkAAACM1HIPT/2eqqrfTPLjhwxf3Vr776OYDwAAAMONJBpba5eOYrsAAAAcGYenAgAA0CUaAQAA6BKNK9jMzMyop7BsT/f/bgMAAJ6qRCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALqOG/UE+O5MX3bTYWMnrB0+Pu/E71v1ZE4JAAB4ChGNY+zOK17dOac3DgAAcGQcngoAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgSzQCAADQJRoBAADoEo0AAAB0iUYAAAC6RCMAAABdohEAAIAu0QgAAECXaAQAAKBLNAIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoEs0AgAA0CUaAQAA6BKNAAAAdIlGAAAAukQjAAAAXaIRAACALtEIAABAl2gEAACgq1pro57DyFXV15LcNep5DPGsJF8f9SRYNus1XqzXeLFe48V6jRfrNV6s13gZp/U6vbX27GFniMYVrKpuaa2dM+p5sDzWa7xYr/FivcaL9Rov1mu8WK/x8lRZL4enAgAA0CUaAQAA6BKNK9u7Rz0Bjoj1Gi/Wa7xYr/FivcaL9Rov1mu8PCXWy3saAQAA6PJKIwAAAF2icQWqqp+sqi9W1R1Vddmo58NiVfWCqpqpqt1VdXtV/cfB+Nuq6p6qum3w57xRz5XvqKo7q+ovB2tzy2Ds5Kr6eFX91eDvk0Y9T5Kq+qGD9qPbqurvquoX7WMrR1W9r6oeqKrPHzQ2dH+qOe8YPKd9rqpeMrqZPz111uu/VtUXBmvy4ap65mB8uqoeO2g/u25kE3+a6qxX9/Gvqn55sH99sar++Whm/fTVWa/rD1qrO6vqtsH42O5fDk9dYapqMsmXkvxEkq8kuTnJxtba7pFOjAVV9bwkz2utfbaqTkhya5LXJPk3Sfa21n5jlPNjuKq6M8k5rbWvHzT260keaq1dMfgFzUmtta2jmiOHGzwm3pPkR5O8IfaxFaGqXpFkb5L/0VpbPxgbuj8N/nG7Jcl5mVvHq1trPzqquT8dddbrVUl2ttYer6ork2SwXtNJbpy/HMdeZ73eliGPf1W1LsmOJD+S5O8n+ZMkZ7bWZo/ppJ/Ghq3XIedvT/JIa+3Xxnn/8krjyvMjSe5orf11a+3bST6Y5PwRz4mDtNbuba19dvD1N5LsSfIDo50VR+n8JO8ffP3+zMU/K8s/TfLl1tpdo54I39Fa+0SShw4Z7u1P52fuH1OttfaZJM8c/PKNY2TYerXWPtZae3xw8jNJnn/MJ8ZQnf2r5/wkH2yt7Wut/U2SOzL3b0mOkaXWq6oqcy8q7Dimk3oSiMaV5weS/O1Bp78SQbJiDX5j9MNJ/mww9KbBoT7vc6jjitOSfKyqbq2qNw7GTm2t3Tv4+r4kp45maizhdVn8ZGsfW7l6+5PntZXvoiT/+6DTL6yqP6+qP62ql49qUhxm2OOf/Wtle3mS+1trf3XQ2FjuX6IRjlJVrUny+0l+sbX2d0muTXJGkrOT3Jtk++hmxxDnttZekuSnklw6OJxkQZs7Vt/x+itIVR2f5KeT/N5gyD42JuxP46OqtiV5PMkHBkP3JjmttfbDSd6c5Heq6vtHNT8WePwbTxuz+BefY7t/icaV554kLzjo9PMHY6wgVbUqc8H4gdbaHyRJa+3+1tpsa+1AkvfE4SErSmvtnsHfDyT5cObW5/75w+QGfz8wuhkyxE8l+Wxr7f7EPjYGevuT57UVqqp+Lsm/SPKzg9DP4DDHBwdf35rky0nOHNkkSbLk45/9a4WqquOS/Ksk18+PjfP+JRpXnpuT/GBVvXDwW/bXJblhxHPiIIPj09+bZE9r7aqDxg9+j87PJPn8oddlNKrqGYMPLUpVPSPJqzK3Pjckef3gYq9P8kejmSEdi35Dax9b8Xr70w1J/v3gU1R/LHMfCHHvsBvg2Kmqn0zyS0l+urX2zYPGnz34AKpU1YuS/GCSvx7NLJm3xOPfDUleV1VTVfXCzK3X/z3W82Oof5bkC621r8wPjPP+ddyoJ8Big08xe1OSjyaZTPK+1trtI54Wi/14kn+X5C/nP0I5yeVJNlbV2Zk7JOvOJD8/iskx1KlJPjzX+zkuye+01v64qm5O8rtVtSnJXZl7szorwCDufyKL96Nft4+tDFW1I8mGJM+qqq8k+ZUkV2T4/vSRzH1y6h1Jvpm5T8HlGOqs1y8nmUry8cFj42daaxcneUWSX6uq/UkOJLm4tbbcD2Xhe6CzXhuGPf611m6vqt9Nsjtzhxlf6pNTj61h69Vae28Of09+Msb7l/9yAwAAgC6HpwIAANAlGgEAAOgSjQAAAHSJRgAAALpEIwAAAF2iEQAAgC7RCAAAQJdoBAAAoOv/A/yheRL0dUfWAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_32_0.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.beat_start.plot.box(vert=False);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`beat_start` looks ok, although we also should include some filtering here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_34_0.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.tempo.plot.box(vert=False);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is interesting to see that 95% of our examples are in the 200 bpm range - maybe they were transcribed in half time or we have a skewed dataset towards fast music which would be an interesting exploration what kind of music gets transcribed to MIDI files.\n",
    "\n",
    "We need to inspect this further as drumming is closely related to the tempo of a song and we do not want to interpret the massive amount of data in a wrong way.\n",
    "\n",
    "It is important to have an understanding and feeling for the data.\n",
    "We have an expectation of our data which can help us to see if the data makes sense and if we parsed it correctly but can also always be problematic because we project certain expectations on an projection and simplification of our data.\n",
    "\n",
    "**TODO** Flesh this out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA5UAAAEvCAYAAADVZuXpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUV0lEQVR4nO3dfbAdZ30f8O9PEq+WYnANboytCBKSwtCh2G6Gym3GxbFFRQbTjmfKTNJAaCa13OmL+6qUKR36F0RJGzIt8rRJasgbIa6bMmY6kpNaScYqBNvE4IQYTDC2wQRIakciaeLIT/84K/lKvteSfr665+j685nZOXue3bN6dn/3uWe/Onv21hgjAAAA0LFh3h0AAADg7CVUAgAA0CZUAgAA0CZUAgAA0CZUAgAA0CZUAgAA0LZp3h2Yt/PPP39s27Zt3t04zje+8Y2cc8458+4GUYtFohaLRT0Wh1osDrVYHGqxONRisaxUj7vuuuvrY4yXdLf7rA+V27Zty5133jnvbhznwIEDueKKK+bdDaIWi0QtFot6LA61WBxqsTjUYnGoxWJZqR5V9cVnsl2XvwIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAmVAIAANAm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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "filenames": {
       "image/png": "/Users/scheiba/github/musikinformatik_sose2021/docs/_build/jupyter_execute/01_midi_drums/01_midi_drums_36_0.png"
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "midi_df_sub.resolution.plot.box(vert=False);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resolution corresponds to the [PPQN](https://en.wikipedia.org/wiki/Pulses_per_quarter_note) of the MIDI file.\n",
    "Everything above 1000 should be suspicious, so lets take a look at those examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beat_start</th>\n",
       "      <th>drums</th>\n",
       "      <th>end_time</th>\n",
       "      <th>file_path</th>\n",
       "      <th>instrument_names</th>\n",
       "      <th>midi_error</th>\n",
       "      <th>num_time_signature_changes</th>\n",
       "      <th>resolution</th>\n",
       "      <th>tempo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>37148</th>\n",
       "      <td>0.882352</td>\n",
       "      <td>False</td>\n",
       "      <td>6.948522</td>\n",
       "      <td>../datasets/midi_dataset/P/P/Push_-_TranzyStat...</td>\n",
       "      <td>[Melody, Bassline]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>272.000290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20991</th>\n",
       "      <td>0.647481</td>\n",
       "      <td>False</td>\n",
       "      <td>13.812928</td>\n",
       "      <td>../datasets/midi_dataset/M/M/MacJ_-_Nightware_...</td>\n",
       "      <td>[SubTractor 1]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>278.000436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30014</th>\n",
       "      <td>1.510789</td>\n",
       "      <td>False</td>\n",
       "      <td>56.978328</td>\n",
       "      <td>../datasets/midi_dataset/E/E/estuera__tales_fr...</td>\n",
       "      <td>[Guitar, Strings]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>170.387364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11567</th>\n",
       "      <td>14.047605</td>\n",
       "      <td>False</td>\n",
       "      <td>30.476160</td>\n",
       "      <td>../datasets/midi_dataset/S/S/SteveAngelloThird...</td>\n",
       "      <td>[Stuff, Lead]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>157.500158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34643</th>\n",
       "      <td>2.888886</td>\n",
       "      <td>False</td>\n",
       "      <td>28.444416</td>\n",
       "      <td>../datasets/midi_dataset/K/K/Kai_Tracid_-_Life...</td>\n",
       "      <td>[SubTractor 1, , ]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>270.000270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35670</th>\n",
       "      <td>0.888888</td>\n",
       "      <td>False</td>\n",
       "      <td>28.444416</td>\n",
       "      <td>../datasets/midi_dataset/L/L/lolo__sunset__amb...</td>\n",
       "      <td>[Main Melody]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>270.000270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22861</th>\n",
       "      <td>1.086955</td>\n",
       "      <td>False</td>\n",
       "      <td>6.956512</td>\n",
       "      <td>../datasets/midi_dataset/J/J/joop__the_world__...</td>\n",
       "      <td>[Main Melody, Low Bass]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>241.500338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3726</th>\n",
       "      <td>0.839160</td>\n",
       "      <td>False</td>\n",
       "      <td>12.587400</td>\n",
       "      <td>../datasets/midi_dataset/N/N/Nitromethane_-_Ti...</td>\n",
       "      <td>[Malstrom 1]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>85.800086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6790</th>\n",
       "      <td>0.218978</td>\n",
       "      <td>False</td>\n",
       "      <td>28.248162</td>\n",
       "      <td>../datasets/midi_dataset/T/T/TonTB_-_Electroni...</td>\n",
       "      <td>[SubTractor 1]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>274.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17374</th>\n",
       "      <td>1.901407</td>\n",
       "      <td>False</td>\n",
       "      <td>13.521120</td>\n",
       "      <td>../datasets/midi_dataset/F/F/filo_peri__i95__d...</td>\n",
       "      <td>[Bass, Piano, Strings]</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15360.0</td>\n",
       "      <td>284.000142</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       beat_start  drums   end_time  \\\n",
       "37148    0.882352  False   6.948522   \n",
       "20991    0.647481  False  13.812928   \n",
       "30014    1.510789  False  56.978328   \n",
       "11567   14.047605  False  30.476160   \n",
       "34643    2.888886  False  28.444416   \n",
       "35670    0.888888  False  28.444416   \n",
       "22861    1.086955  False   6.956512   \n",
       "3726     0.839160  False  12.587400   \n",
       "6790     0.218978  False  28.248162   \n",
       "17374    1.901407  False  13.521120   \n",
       "\n",
       "                                               file_path  \\\n",
       "37148  ../datasets/midi_dataset/P/P/Push_-_TranzyStat...   \n",
       "20991  ../datasets/midi_dataset/M/M/MacJ_-_Nightware_...   \n",
       "30014  ../datasets/midi_dataset/E/E/estuera__tales_fr...   \n",
       "11567  ../datasets/midi_dataset/S/S/SteveAngelloThird...   \n",
       "34643  ../datasets/midi_dataset/K/K/Kai_Tracid_-_Life...   \n",
       "35670  ../datasets/midi_dataset/L/L/lolo__sunset__amb...   \n",
       "22861  ../datasets/midi_dataset/J/J/joop__the_world__...   \n",
       "3726   ../datasets/midi_dataset/N/N/Nitromethane_-_Ti...   \n",
       "6790   ../datasets/midi_dataset/T/T/TonTB_-_Electroni...   \n",
       "17374  ../datasets/midi_dataset/F/F/filo_peri__i95__d...   \n",
       "\n",
       "              instrument_names  midi_error  num_time_signature_changes  \\\n",
       "37148       [Melody, Bassline]       False                         1.0   \n",
       "20991           [SubTractor 1]       False                         1.0   \n",
       "30014        [Guitar, Strings]       False                         1.0   \n",
       "11567            [Stuff, Lead]       False                         1.0   \n",
       "34643       [SubTractor 1, , ]       False                         1.0   \n",
       "35670            [Main Melody]       False                         1.0   \n",
       "22861  [Main Melody, Low Bass]       False                         1.0   \n",
       "3726              [Malstrom 1]       False                         1.0   \n",
       "6790            [SubTractor 1]       False                         1.0   \n",
       "17374   [Bass, Piano, Strings]       False                         1.0   \n",
       "\n",
       "       resolution       tempo  \n",
       "37148     15360.0  272.000290  \n",
       "20991     15360.0  278.000436  \n",
       "30014     15360.0  170.387364  \n",
       "11567     15360.0  157.500158  \n",
       "34643     15360.0  270.000270  \n",
       "35670     15360.0  270.000270  \n",
       "22861     15360.0  241.500338  \n",
       "3726      15360.0   85.800086  \n",
       "6790      15360.0  274.000128  \n",
       "17374     15360.0  284.000142  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "midi_df_sub.sort_values('resolution', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "musikinformatik_sose2021",
   "language": "python",
   "name": "musikinformatik_sose2021"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}